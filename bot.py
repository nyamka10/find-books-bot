#!/usr/bin/env python3
"""
–¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –¥–ª—è –ø–∞—Ä—Å–µ—Ä–∞ –§–ª–∏–±—É—Å—Ç–∞
"""

import asyncio
import logging
import time
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    InlineKeyboardMarkup, 
    InlineKeyboardButton,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    KeyboardButton
)
from aiogram.filters import Command
import aiosqlite
import os
from dotenv import load_dotenv

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à –ø–∞—Ä—Å–µ—Ä
from flibusta_parser import FlibustaParser
from kindle_sender import KindleSender

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class UserStates(StatesGroup):
    waiting_for_search_query = State()
    waiting_for_kindle_email = State()
    confirming_kindle_email = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=os.getenv('TELEGRAM_BOT_TOKEN'))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
DB_PATH = "flibusta_bot.db"

def escape_markdown(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown"""
    if not text:
        return ""
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º
    if len(text) > 1000:
        text = text[:1000] + "..."
    
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown
    special_chars = ['*', '_', '[', ']', '`', '#', '+', '-', '=', '|', '{', '}', '.', '!', '(', ')', '~', '>', '<']
    escaped_text = text
    
    for char in special_chars:
        escaped_text = escaped_text.replace(char, f'\\{char}')
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        test_message = f"Test: {escaped_text}"
        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –≤–µ—Ä—Å–∏—é
        return escaped_text
    except Exception:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –≤–µ—Ä—Å–∏—é –±–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        safe_text = text.replace('*', '').replace('_', '').replace('[', '').replace(']', '').replace('`', '')
        safe_text = safe_text.replace('#', '').replace('+', '').replace('-', '').replace('=', '').replace('|', '')
        safe_text = safe_text.replace('{', '').replace('}', '').replace('.', '').replace('!', '').replace('(', '').replace(')', '')
        safe_text = safe_text.replace('~', '').replace('>', '').replace('<', '')
        return safe_text[:500]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É

async def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("""
            CREATE TABLE IF NOT EXISTS users (
                telegram_id INTEGER PRIMARY KEY,
                kindle_email TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        await db.execute("""
            CREATE TABLE IF NOT EXISTS downloaded_books (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                telegram_id INTEGER,
                book_title TEXT,
                book_author TEXT,
                format_type TEXT,
                downloaded_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (telegram_id) REFERENCES users (telegram_id)
            )
        """)
        
        await db.execute("""
            CREATE TABLE IF NOT EXISTS kindle_sent_books (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                telegram_id INTEGER,
                book_title TEXT,
                book_author TEXT,
                sent_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (telegram_id) REFERENCES users (telegram_id)
            )
        """)
        
        await db.execute("""
            CREATE TABLE IF NOT EXISTS search_history (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                telegram_id INTEGER,
                search_query TEXT,
                results_count INTEGER,
                searched_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (telegram_id) REFERENCES users (telegram_id)
            )
        """)
        
        await db.execute("""
            CREATE TABLE IF NOT EXISTS admin_users (
                telegram_id INTEGER PRIMARY KEY,
                username TEXT,
                added_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        await db.commit()

async def get_user_kindle_email(telegram_id: int) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç email Kindle –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute(
            "SELECT kindle_email FROM users WHERE telegram_id = ?", 
            (telegram_id,)
        )
        result = await cursor.fetchone()
        return result[0] if result else None

async def save_user_kindle_email(telegram_id: int, kindle_email: str):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç email Kindle –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("""
            INSERT OR REPLACE INTO users (telegram_id, kindle_email) 
            VALUES (?, ?)
        """, (telegram_id, kindle_email))
        await db.commit()

async def save_downloaded_book(telegram_id: int, book_title: str, book_author: str, format_type: str):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫–∞—á–∞–Ω–Ω–æ–π –∫–Ω–∏–≥–µ"""
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("""
            INSERT INTO downloaded_books (telegram_id, book_title, book_author, format_type)
            VALUES (?, ?, ?, ?)
        """, (telegram_id, book_title, book_author, format_type))
        await db.commit()

async def save_kindle_sent_book(telegram_id: int, book_title: str, book_author: str):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –Ω–∞ Kindle –∫–Ω–∏–≥–µ"""
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("""
            INSERT INTO kindle_sent_books (telegram_id, book_title, book_author)
            VALUES (?, ?, ?)
        """, (telegram_id, book_title, book_author))
        await db.commit()

async def save_search_history(telegram_id: int, search_query: str, results_count: int):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞"""
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("""
            INSERT INTO search_history (telegram_id, search_query, results_count)
            VALUES (?, ?, ?)
        """, (telegram_id, search_query, results_count))
        await db.commit()

async def is_admin(telegram_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute(
            "SELECT telegram_id FROM admin_users WHERE telegram_id = ?", 
            (telegram_id,)
        )
        result = await cursor.fetchone()
        return result is not None

async def add_admin(telegram_id: int, username: str = None):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("""
            INSERT OR REPLACE INTO admin_users (telegram_id, username) 
            VALUES (?, ?)
        """, (telegram_id, username))
        await db.commit()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_menu_keyboard() -> ReplyKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = [
        [KeyboardButton(text="üîç –ü–æ–∏—Å–∫ –∫–Ω–∏–≥–∏"), KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Kindle")]
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

def get_admin_keyboard() -> ReplyKeyboardMarkup:
    """–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    keyboard = [
        [KeyboardButton(text="üîç –ü–æ–∏—Å–∫ –∫–Ω–∏–≥–∏"), KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Kindle")],
        [KeyboardButton(text="üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")]
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

def get_back_to_main_keyboard() -> InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = [
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_empty_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    return ReplyKeyboardRemove()

def get_book_formats_keyboard(book_id: str) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ñ–æ—Ä–º–∞—Ç–∞–º–∏ –∫–Ω–∏–≥–∏"""
    keyboard = [
        [
            InlineKeyboardButton(text="üìñ EPUB", callback_data=f"download_{book_id}_epub"),
            InlineKeyboardButton(text="üìÑ FB2", callback_data=f"download_{book_id}_fb2"),
            InlineKeyboardButton(text="üì± MOBI", callback_data=f"download_{book_id}_mobi")
        ],
        [
            InlineKeyboardButton(text="üìß –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ Kindle", callback_data=f"kindle_{book_id}"),
            InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_pagination_keyboard(current_page: int, total_pages: int, query: str) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ - —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–µ–ª–∫–∏"""
    keyboard = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    logger.info(f"get_pagination_keyboard: —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page}, –≤—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü {total_pages}, –∑–∞–ø—Ä–æ—Å '{query}'")
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è - —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–µ–ª–∫–∏
    nav_row = []
    if current_page > 1:
        nav_row.append(InlineKeyboardButton(text="‚óÄÔ∏è", callback_data=f"page_{query}_{current_page-1}"))
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ —Ü–µ–Ω—Ç—Ä–µ
    nav_row.append(InlineKeyboardButton(text=f"‚Ä¢{current_page}‚Ä¢", callback_data="no_action"))
    
    if current_page < total_pages:
        nav_row.append(InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data=f"page_{query}_{current_page+1}"))
    
    if nav_row:
        keyboard.append(nav_row)
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏—è: {len(nav_row)} –∫–Ω–æ–ø–æ–∫")
    
    keyboard.append([InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    
    logger.info(f"–ò—Ç–æ–≥–æ–≤–∞—è –ø–∞–≥–∏–Ω–∞—Ü–∏—è: {len(keyboard)} —Ä—è–¥–æ–≤")
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    is_admin_user = await is_admin(message.from_user.id)
    
    welcome_text = "üìö –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –§–ª–∏–±—É—Å—Ç–∞!\n\n"
    welcome_text += "üîç –ò—â–∏—Ç–µ –∫–Ω–∏–≥–∏, —Å–∫–∞—á–∏–≤–∞–π—Ç–µ –∏—Ö –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö\n"
    welcome_text += "üìß –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –Ω–∞ Kindle –ø–æ email\n\n"
    
    if is_admin_user:
        welcome_text += "üëë **–í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä**\n"
        welcome_text += "–î–æ—Å—Ç—É–ø–Ω–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n\n"
        keyboard = get_admin_keyboard()
    else:
        keyboard = get_main_menu_keyboard()
    
    welcome_text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    await message.answer(welcome_text, reply_markup=keyboard, parse_mode="Markdown")

@dp.message(F.text == "üîç –ü–æ–∏—Å–∫ –∫–Ω–∏–≥–∏")
async def search_books_menu(message: types.Message, state: FSMContext):
    """–ú–µ–Ω—é –ø–æ–∏—Å–∫–∞ –∫–Ω–∏–≥"""
    await state.set_state(UserStates.waiting_for_search_query)
    # –°–∫—Ä—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–∏—Å–∫
    await message.answer(
        "üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –∏–ª–∏ –∞–≤—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:",
        reply_markup=get_back_to_main_keyboard()
    )
    # –°–∫—Ä—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await message.answer(
        "‚å®Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–∫—Ä—ã—Ç–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞.",
        reply_markup=get_empty_keyboard()
    )

@dp.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Kindle")
async def kindle_settings_menu(message: types.Message):
    """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Kindle"""
    kindle_email = await get_user_kindle_email(message.from_user.id)
    
    if kindle_email:
        await message.answer(
            f"‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Kindle**\n\n"
            f"üìß **–¢–µ–∫—É—â–∏–π email:** `{kindle_email}`\n\n"
            "–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è email –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å email", callback_data="change_kindle_email")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]),
            parse_mode="Markdown"
        )
    else:
        await message.answer(
            "‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Kindle**\n\n"
            "üìß –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–Ω–∏–≥ –Ω–∞ Kindle –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –≤–∞—à Kindle email.\n\n"
            "üîó **–í–∞–∂–Ω–æ:** –î–æ–±–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å –±–æ—Ç–∞ `abookerbot@gmail.com` –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫:\n"
            "https://www.amazon.com/hz/mycd/preferences/myx#/home/settings/payment\n\n"
            "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à Kindle email:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìß –í–≤–µ—Å—Ç–∏ email", callback_data="set_kindle_email")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]),
            parse_mode="Markdown"
        )
    
    # –°–∫—Ä—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await message.answer(
        "‚å®Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–∫—Ä—ã—Ç–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞.",
        reply_markup=get_empty_keyboard()
    )





@dp.message(F.text == "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def admin_panel(message: types.Message):
    """–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not await is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
        return
    
    async with aiosqlite.connect(DB_PATH) as db:
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        cursor = await db.execute("SELECT COUNT(*) FROM users")
        total_users = (await cursor.fetchone())[0]
        
        cursor = await db.execute("SELECT COUNT(*) FROM downloaded_books")
        total_downloads = (await cursor.fetchone())[0]
        
        cursor = await db.execute("SELECT COUNT(*) FROM kindle_sent_books")
        total_kindle = (await cursor.fetchone())[0]
        
        cursor = await db.execute("SELECT COUNT(*) FROM search_history")
        total_searches = (await cursor.fetchone())[0]
    
    text = f"üëë **–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å**\n\n"
    text += f"üìä **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
    text += f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
    text += f"‚¨áÔ∏è –ó–∞–≥—Ä—É–∑–æ–∫: {total_downloads}\n"
    text += f"üìß Kindle –æ—Ç–ø—Ä–∞–≤–æ–∫: {total_kindle}\n"
    text += f"üîç –ü–æ–∏—Å–∫–æ–≤: {total_searches}\n\n"
    text += "**–î–µ–π—Å—Ç–≤–∏—è:**"
    
    await message.answer(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")],
            [InlineKeyboardButton(text="üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="admin_add")],
            [InlineKeyboardButton(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à –±–æ—Ç–∞", callback_data="admin_clear_cache")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]),
        parse_mode="Markdown"
    )
    
    # –°–∫—Ä—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await message.answer(
        "‚å®Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–∫—Ä—ã—Ç–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞.",
        reply_markup=get_empty_keyboard()
    )



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–∏—Å–∫–∞
@dp.message(UserStates.waiting_for_search_query)
async def process_search_query(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    query = message.text.strip()
    
    if len(query) < 2:
        await message.answer("‚ùå –ó–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞")
        return
    
    await state.clear()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ
    search_msg = await message.answer("üîç –ò—â—É –∫–Ω–∏–≥–∏...")
    
    try:
        async with FlibustaParser() as parser:
            # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
            if not await parser.login():
                await search_msg.edit_text("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ –§–ª–∏–±—É—Å—Ç–∞")
                return
            
            # –ü–æ–∏—Å–∫ –∫–Ω–∏–≥
            books = await parser.search_books(query, limit=100)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            logger.info(f"–ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}': –Ω–∞–π–¥–µ–Ω–æ {len(books) if books else 0} –∫–Ω–∏–≥")
            if books:
                logger.info(f"–ü–µ—Ä–≤–∞—è –∫–Ω–∏–≥–∞: {books[0] if len(books) > 0 else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}")
                logger.info(f"–ö–ª—é—á–∏ –ø–µ—Ä–≤–æ–π –∫–Ω–∏–≥–∏: {list(books[0].keys()) if books else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}")
            
            if not books:
                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Markdown
                query_escaped = query.replace('*', '\\*').replace('_', '\\_').replace('[', '\\[').replace(']', '\\]').replace('`', '\\`')
                
                await search_msg.edit_text(
                    f"‚ùå –ü–æ –∑–∞–ø—Ä–æ—Å—É '{query_escaped}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                    reply_markup=get_back_to_main_keyboard()
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.update_data(
                search_results=books,
                current_page=1,
                search_query=query
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            await show_search_results_page(message, books[:10], 1, len(books), query)
            await search_msg.delete()
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
        await search_msg.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_back_to_main_keyboard()
        )

def create_search_results_content(books: list, page: int, total_books: int, query: str):
    """–°–æ–∑–¥–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
    total_pages = (total_books + 9) // 10  # –û–∫—Ä—É–≥–ª—è–µ–º –≤–≤–µ—Ä—Ö (10 –∫–Ω–∏–≥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    logger.info(f"create_search_results_content: {len(books)} –∫–Ω–∏–≥, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}, –≤—Å–µ–≥–æ {total_books}")
    if books:
        logger.info(f"–ü–µ—Ä–≤–∞—è –∫–Ω–∏–≥–∞ –≤ —Å–ø–∏—Å–∫–µ: {books[0]}")
        logger.info(f"–ö–ª—é—á–∏ –ø–µ—Ä–≤–æ–π –∫–Ω–∏–≥–∏: {list(books[0].keys()) if books else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Markdown
    query_escaped = escape_markdown(query)
    
    text = f"üîç **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: '{query_escaped}'**\n"
    text += f"üìö –ù–∞–π–¥–µ–Ω–æ: {total_books} –∫–Ω–∏–≥\n"
    text += f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ —Å –∞–≤—Ç–æ—Ä–∞–º–∏
    for i, book in enumerate(books, 1):
        title = book.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        author = book.get('author', '–ê–≤—Ç–æ—Ä –Ω–µ —É–∫–∞–∑–∞–Ω')
        
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown
        title_escaped = escape_markdown(title)
        author_escaped = escape_markdown(author)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –Ω–∞–∑–≤–∞–Ω–∏—è –∏ –∞–≤—Ç–æ—Ä–∞ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        title_short = title_escaped[:50] + "..." if len(title_escaped) > 50 else title_escaped
        author_short = author_escaped[:40] + "..." if len(author_escaped) > 40 else author_escaped
        
        text += f"**{i}.** üìñ **{title_short}**\n"
        text += f"üë§ {author_short}\n\n"
    
    text += "**–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π:**"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–∏–≥–∞–º–∏ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    keyboard = []
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–Ω–∏–≥–∏ - –æ—Ä–≥–∞–Ω–∏–∑—É–µ–º –≤ –¥–≤–∞ —Ä—è–¥–∞ –ø–æ 5 –∫–Ω–æ–ø–æ–∫
    book_buttons_row1 = []
    book_buttons_row2 = []
    
    for i, book in enumerate(books, 1):
        book_id = book.get('book_id', '')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º 'book_id' –≤–º–µ—Å—Ç–æ 'id'
        title = book.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        
        logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–Ω–∏–≥—É {i}: book_id={book_id}, title={title}")
        
        if book_id:
            # –°–æ–∑–¥–∞–µ–º –±–æ–ª–µ–µ –∫–æ–º–ø–∞–∫—Ç–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
            button = InlineKeyboardButton(
                text=f"{i}",
                callback_data=f"select_book_{book_id}"
            )
            
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ —Ä—è–¥–∞–º (–ø–æ 5 –∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥—É)
            if i <= 5:  # –ü–µ—Ä–≤—ã–µ 5 –∫–Ω–∏–≥ –≤ –ø–µ—Ä–≤—ã–π —Ä—è–¥
                book_buttons_row1.append(button)
            elif i <= 10:  # –°–ª–µ–¥—É—é—â–∏–µ 5 –∫–Ω–∏–≥ –≤–æ –≤—Ç–æ—Ä–æ–π —Ä—è–¥
                book_buttons_row2.append(button)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä—è–¥—ã —Å –∫–Ω–∏–≥–∞–º–∏
    if book_buttons_row1:
        keyboard.append(book_buttons_row1)
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –ø–µ—Ä–≤—ã–π —Ä—è–¥: {len(book_buttons_row1)} –∫–Ω–æ–ø–æ–∫")
    if book_buttons_row2:
        keyboard.append(book_buttons_row2)
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –≤—Ç–æ—Ä–æ–π —Ä—è–¥: {len(book_buttons_row2)} –∫–Ω–æ–ø–æ–∫")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
    pagination_keyboard = get_pagination_keyboard(page, total_pages, query)
    keyboard.extend(pagination_keyboard.inline_keyboard)
    
    logger.info(f"–ò—Ç–æ–≥–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞: {len(keyboard)} —Ä—è–¥–æ–≤")
    
    return text, InlineKeyboardMarkup(inline_keyboard=keyboard)

async def show_search_results_page(message: types.Message, books: list, page: int, total_books: int, query: str):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
    text, keyboard = create_search_results_content(books, page, total_books, query)
    await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback
@dp.callback_query(F.data == "no_action")
async def process_no_action(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫"""
    await callback.answer("üìÑ –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")

@dp.callback_query(F.data.startswith("page_"))
async def process_page_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
    try:
        await callback.answer("üìÑ –ü–µ—Ä–µ–∫–ª—é—á–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...")
        
        _, query, page = callback.data.split("_", 2)
        page = int(page)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        search_results = data.get('search_results', [])
        
        if not search_results:
            await callback.answer("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        start_idx = (page - 1) * 10
        end_idx = start_idx + 10
        page_books = search_results[start_idx:end_idx]
        
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Markdown
        query_escaped = escape_markdown(query)
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        text, keyboard = create_search_results_content(page_books, page, len(search_results), query_escaped)
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å callback'–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –æ—Ç–≤–µ—Ç–∞ –æ–± –æ—à–∏–±–∫–µ
        try:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
        except Exception as callback_error:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å callback answer: {callback_error}")
        
        try:
            await callback.message.answer(
                "‚ùå **–û—à–∏–±–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏**\n\n"
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=get_back_to_main_keyboard(),
                parse_mode="Markdown"
            )
        except Exception as message_error:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {message_error}")

@dp.callback_query(F.data.startswith("select_book_"))
async def process_book_selection_from_search(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–Ω–∏–≥–∏ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
    try:
        await callback.answer("üìñ –ó–∞–≥—Ä—É–∂–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–∏–≥–µ...")
        
        book_id = callback.data.split("_", 2)[2]
        
        async with FlibustaParser() as parser:
            if not await parser.login():
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∫–Ω–∏–≥–∏
            book_details = await parser.get_book_details(book_id)
            
            if not book_details:
                await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–∏–≥–µ")
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –∫–Ω–∏–≥–∏
            title_escaped = escape_markdown(book_details['title'])
            author_escaped = escape_markdown(book_details['author'])
            
            text = f"üìñ **{title_escaped}**\n\n"
            text += f"üë§ **–ê–≤—Ç–æ—Ä:** {author_escaped}\n"
            
            if book_details.get('genres'):
                genres_escaped = escape_markdown(', '.join(book_details['genres']))
                text += f"üè∑Ô∏è **–ñ–∞–Ω—Ä:** {genres_escaped}\n"
            
            if book_details.get('description'):
                desc = book_details['description'][:300] + "..." if len(book_details['description']) > 300 else book_details['description']
                desc_escaped = escape_markdown(desc)
                text += f"\nüìù **–û–ø–∏—Å–∞–Ω–∏–µ:**\n{desc_escaped}\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Ñ–æ—Ä–º–∞—Ç–æ–≤
            keyboard = get_book_formats_keyboard(book_id)
            await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∫–Ω–∏–≥–∏: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å callback'–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –æ—Ç–≤–µ—Ç–∞ –æ–± –æ—à–∏–±–∫–µ
        try:
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        except Exception as callback_error:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å callback answer: {callback_error}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        try:
            await callback.message.answer(
                "‚ùå **–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–Ω–∏–≥–∏**\n\n"
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–∏–≥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=get_back_to_main_keyboard(),
                parse_mode="Markdown"
            )
        except Exception as message_error:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {message_error}")

@dp.callback_query(F.data.startswith("book_"))
async def process_book_selection(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–Ω–∏–≥–∏ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
    await process_book_selection_from_search(callback)

@dp.callback_query(F.data.startswith("download_"))
async def process_download(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∫–Ω–∏–≥–∏"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ callback –µ—â–µ –≤–∞–ª–∏–¥–µ–Ω
        if callback.message.date.timestamp() < time.time() - 3600:  # 1 —á–∞—Å
            await callback.answer("‚ùå –°–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä—ã–π –∑–∞–ø—Ä–æ—Å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
            return
            
        _, book_id, format_type = callback.data.split("_", 2)
        
        await callback.answer("‚¨áÔ∏è –ó–∞–≥—Ä—É–∂–∞—é –∫–Ω–∏–≥—É...")
        
        async with FlibustaParser() as parser:
            if not await parser.login():
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
                return
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –∫–Ω–∏–≥—É
            book_content = await parser.download_book(book_id, format_type)
            
            if not book_content:
                await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∫–Ω–∏–≥—É")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∫–Ω–∏–≥–∏ –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            book_details = await parser.get_book_details(book_id)
            filename = f"{book_details['title']}.{format_type}"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            title_escaped = escape_markdown(book_details['title'])
            author_escaped = escape_markdown(book_details['author'])
            
            await callback.message.answer_document(
                types.BufferedInputFile(
                    book_content, 
                    filename=filename
                ),
                caption=f"üìñ **{title_escaped}**\nüë§ {author_escaped}\nüìÅ –§–æ—Ä–º–∞—Ç: {format_type.upper()}",
                reply_markup=get_back_to_main_keyboard(),
                parse_mode="Markdown"
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            await save_downloaded_book(
                callback.from_user.id,
                book_details['title'],
                book_details['author'],
                format_type
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å callback'–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –æ—Ç–≤–µ—Ç–∞
            try:
                await callback.answer("‚úÖ –ö–Ω–∏–≥–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
            except Exception as callback_error:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å callback answer –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏: {callback_error}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å callback'–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –æ—Ç–≤–µ—Ç–∞ –æ–± –æ—à–∏–±–∫–µ
        try:
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏")
        except Exception as callback_error:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å callback answer: {callback_error}")
        
        try:
            await callback.message.answer(
                "‚ùå **–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è**\n\n"
                "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∫–Ω–∏–≥—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=get_back_to_main_keyboard(),
                parse_mode="Markdown"
            )
        except Exception as message_error:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {message_error}")

@dp.callback_query(F.data.startswith("kindle_"))
async def process_kindle_send(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ Kindle"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ callback –µ—â–µ –≤–∞–ª–∏–¥–µ–Ω
        if callback.message.date.timestamp() < time.time() - 3600:  # 1 —á–∞—Å
            await callback.answer("‚ùå –°–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä—ã–π –∑–∞–ø—Ä–æ—Å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
            return
            
        book_id = callback.data.split("_", 1)[1]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Kindle
        kindle_email = await get_user_kindle_email(callback.from_user.id)
        
        if not kindle_email:
            await callback.answer("‚ùå –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Kindle email")
            await callback.message.answer(
                "‚ùå **Kindle email –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!**\n\n"
                "–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–Ω–∏–≥ –Ω–∞ Kindle –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å email –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ]),
                parse_mode="Markdown"
            )
            return
        
        await callback.answer("üìß –û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–∞ Kindle...")
        
        async with FlibustaParser() as parser:
            if not await parser.login():
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
                return
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –∫–Ω–∏–≥—É –≤ EPUB
            book_content = await parser.download_book(book_id, 'epub')
            
            if not book_content:
                await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∫–Ω–∏–≥—É")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∫–Ω–∏–≥–∏
            book_details = await parser.get_book_details(book_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ Kindle
            kindle_sender = KindleSender()
            success = kindle_sender.send_book_to_kindle(
                book_content, 
                book_details['title'], 
                book_details['author']
            )
            
            if success:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                await save_kindle_sent_book(
                    callback.from_user.id,
                    book_details['title'],
                    book_details['author']
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å callback'–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –æ—Ç–≤–µ—Ç–∞
                try:
                    await callback.answer("‚úÖ –ö–Ω–∏–≥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ Kindle!")
                except Exception as callback_error:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å callback answer –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏: {callback_error}")
                
                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown
                title_escaped = escape_markdown(book_details['title'])
                author_escaped = escape_markdown(book_details['author'])
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                if not title_escaped:
                    title_escaped = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–∏–≥–∞"
                if not author_escaped:
                    author_escaped = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä"
                
                try:
                    await callback.message.answer(
                        f"‚úÖ **–ö–Ω–∏–≥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ Kindle!**\n\n"
                        f"üìñ {title_escaped}\n"
                        f"üë§ {author_escaped}\n"
                        f"üìß {kindle_email}\n\n"
                        f"–ö–Ω–∏–≥–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∞ –≤–∞—à Kindle –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç.",
                        reply_markup=get_back_to_main_keyboard(),
                        parse_mode="Markdown"
                    )
                except Exception as markdown_error:
                    logger.warning(f"–û—à–∏–±–∫–∞ Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏: {markdown_error}")
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ Markdown —Ä–∞–∑–º–µ—Ç–∫–∏
                    await callback.message.answer(
                        f"‚úÖ –ö–Ω–∏–≥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ Kindle!\n\n"
                        f"üìñ {title_escaped}\n"
                        f"üë§ {author_escaped}\n"
                        f"üìß {kindle_email}\n\n"
                        f"–ö–Ω–∏–≥–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∞ –≤–∞—à Kindle –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç.",
                        reply_markup=get_back_to_main_keyboard()
                    )
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å callback'–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –æ—Ç–≤–µ—Ç–∞
                try:
                    await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ Kindle")
                except Exception as callback_error:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å callback answer –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏: {callback_error}")
                
                try:
                    await callback.message.answer(
                        "‚ùå **–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ Kindle**\n\n"
                        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Gmail –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                        reply_markup=get_back_to_main_keyboard(),
                        parse_mode="Markdown"
                    )
                except Exception as markdown_error:
                    logger.warning(f"–û—à–∏–±–∫–∞ Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ–± –æ—à–∏–±–∫–µ: {markdown_error}")
                    await callback.message.answer(
                        "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ Kindle\n\n"
                        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Gmail –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                        reply_markup=get_back_to_main_keyboard()
                    )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ Kindle: {e}")
        try:
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        except Exception as callback_error:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å callback answer: {callback_error}")
        
        try:
            await callback.message.answer(
                "‚ùå **–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ Kindle**\n\n"
                "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=get_back_to_main_keyboard(),
                parse_mode="Markdown"
            )
        except Exception as markdown_error:
            logger.warning(f"–û—à–∏–±–∫–∞ Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ–± –æ–±—â–µ–π –æ—à–∏–±–∫–µ: {markdown_error}")
            try:
                await callback.message.answer(
                    "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ Kindle\n\n"
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                    reply_markup=get_back_to_main_keyboard()
                )
            except Exception as message_error:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {message_error}")

@dp.callback_query(F.data == "main_menu")
async def back_to_main_menu(callback: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        await state.clear()
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å ReplyKeyboardMarkup
        try:
            await callback.message.answer(
                "üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=get_main_menu_keyboard(),
                parse_mode="Markdown"
            )
        except Exception as markdown_error:
            logger.warning(f"–û—à–∏–±–∫–∞ Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é: {markdown_error}")
            await callback.message.answer(
                "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=get_main_menu_keyboard()
            )
        await callback.answer("üè† –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: {e}")
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.answer(
            "üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_menu_keyboard(),
            parse_mode="Markdown"
        )
        await callback.answer("üè† –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

@dp.callback_query(F.data == "kindle_settings")
async def kindle_settings_callback(callback: types.CallbackQuery):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Kindle —á–µ—Ä–µ–∑ callback"""
    try:
        await callback.answer("‚öôÔ∏è –û—Ç–∫—Ä—ã–≤–∞—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Kindle...")
        await kindle_settings_menu(callback.message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ Kindle: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫")

@dp.callback_query(F.data == "set_kindle_email")
async def set_kindle_email_callback(callback: types.CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Kindle email"""
    try:
        await callback.answer("üìß –í–≤–µ–¥–∏—Ç–µ –≤–∞—à Kindle email...")
        await state.set_state(UserStates.waiting_for_kindle_email)
        await callback.message.edit_text(
            "üìß –í–≤–µ–¥–∏—Ç–µ –≤–∞—à Kindle email:\n\n"
            "–§–æ—Ä–º–∞—Ç: `–≤–∞—à–µ_–∏–º—è_XXXXXX@kindle.com`",
            reply_markup=get_back_to_main_keyboard(),
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Kindle email: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ email")

@dp.callback_query(F.data == "change_kindle_email")
async def change_kindle_email_callback(callback: types.CallbackQuery, state: FSMContext):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ Kindle email"""
    try:
        await callback.answer("üìß –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π Kindle email...")
        await state.set_state(UserStates.waiting_for_kindle_email)
        await callback.message.edit_text(
            "üìß –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π Kindle email:\n\n"
            "–§–æ—Ä–º–∞—Ç: `–≤–∞—à–µ_–∏–º—è_XXXXXX@kindle.com`",
            reply_markup=get_back_to_main_keyboard(),
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è Kindle email: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è email")

@dp.message(UserStates.waiting_for_kindle_email)
async def process_kindle_email(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ Kindle email"""
    email = message.text.strip()
    
    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
    if not email.endswith('@kindle.com'):
        await message.answer(
            "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email!**\n\n"
            "Kindle email –¥–æ–ª–∂–µ–Ω –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –Ω–∞ `@kindle.com`\n"
            "–ü—Ä–∏–º–µ—Ä: `myname_XXXXXX@kindle.com`",
            reply_markup=get_back_to_main_keyboard(),
            parse_mode="Markdown"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º email –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await state.update_data(kindle_email=email)
    await state.set_state(UserStates.confirming_kindle_email)
    
    await message.answer(
        f"üìß **–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Kindle**\n\n"
        f"**Email:** `{email}`\n\n"
        f"‚ö†Ô∏è **–í–∞–∂–Ω–æ:** –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:\n"
        f"1. Email —É–∫–∞–∑–∞–Ω –≤–µ—Ä–Ω–æ\n"
        f"2. –ê–¥—Ä–µ—Å `abookerbot@gmail.com` –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ Amazon\n\n"
        f"–í—Å–µ –≤–µ—Ä–Ω–æ?",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –î–∞, –≤—Å–µ –≤–µ—Ä–Ω–æ", callback_data="confirm_kindle_email")],
            [InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –∏–∑–º–µ–Ω–∏—Ç—å", callback_data="set_kindle_email")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]),
        parse_mode="Markdown"
    )

@dp.callback_query(F.data == "confirm_kindle_email")
async def confirm_kindle_email_callback(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ Kindle email"""
    data = await state.get_data()
    email = data.get('kindle_email')
    
    if email:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        await save_user_kindle_email(callback.from_user.id, email)
        
        await callback.message.edit_text(
            f"‚úÖ **Kindle email —Å–æ—Ö—Ä–∞–Ω–µ–Ω!**\n\n"
            f"üìß Email: `{email}`\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫–Ω–∏–≥–∏ –Ω–∞ Kindle –ø—Ä—è–º–æ –∏–∑ –±–æ—Ç–∞!",
            reply_markup=get_back_to_main_keyboard(),
            parse_mode="Markdown"
        )
        
        await state.clear()
    else:
        await callback.answer("‚ùå Email –Ω–µ –Ω–∞–π–¥–µ–Ω")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏
@dp.callback_query(F.data == "download_history")
async def show_download_history(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∑–∞–≥—Ä—É–∑–æ–∫"""
    try:
        await callback.answer("üìö –ó–∞–≥—Ä—É–∂–∞—é –∏—Å—Ç–æ—Ä–∏—é –∑–∞–≥—Ä—É–∑–æ–∫...")
        
        async with aiosqlite.connect(DB_PATH) as db:
            cursor = await db.execute("""
                SELECT book_title, book_author, format_type, downloaded_at 
                FROM downloaded_books 
                WHERE telegram_id = ? 
                ORDER BY downloaded_at DESC 
                LIMIT 10
            """, (callback.from_user.id,))
            
            books = await cursor.fetchall()
        
        if not books:
            await callback.message.answer(
                "üìö **–ò—Å—Ç–æ—Ä–∏—è –∑–∞–≥—Ä—É–∑–æ–∫**\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∫–Ω–∏–≥.",
                reply_markup=get_back_to_main_keyboard(),
                parse_mode="Markdown"
            )
            return
        
        text = "üìö **–ò—Å—Ç–æ—Ä–∏—è –∑–∞–≥—Ä—É–∑–æ–∫**\n\n"
        for book in books:
            title, author, format_type, date = book
            text += f"üìñ **{title}**\n"
            text += f"üë§ {author}\n"
            text += f"üìÅ {format_type.upper()} ‚Ä¢ {date[:10]}\n\n"
        
        await callback.message.answer(
            text,
            reply_markup=get_back_to_main_keyboard(),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–≥—Ä—É–∑–æ–∫: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏")
        await callback.message.answer(
            "‚ùå **–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏**\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞–≥—Ä—É–∑–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_back_to_main_keyboard(),
            parse_mode="Markdown"
        )

@dp.callback_query(F.data == "kindle_history")
async def show_kindle_history(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –æ—Ç–ø—Ä–∞–≤–æ–∫ –Ω–∞ Kindle"""
    try:
        await callback.answer("üìß –ó–∞–≥—Ä—É–∂–∞—é –∏—Å—Ç–æ—Ä–∏—é Kindle...")
        
        async with aiosqlite.connect(DB_PATH) as db:
            cursor = await db.execute("""
                SELECT book_title, book_author, sent_at 
                FROM kindle_sent_books 
                WHERE telegram_id = ? 
                ORDER BY sent_at DESC 
                LIMIT 10
            """, (callback.from_user.id,))
            
            books = await cursor.fetchall()
        
        if not books:
            await callback.message.answer(
                "üìß **–ò—Å—Ç–æ—Ä–∏—è –æ—Ç–ø—Ä–∞–≤–æ–∫ –Ω–∞ Kindle**\n\n"
                "–í—ã –ø–æ–∫–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –∫–Ω–∏–≥–∏ –Ω–∞ Kindle.",
                reply_markup=get_back_to_main_keyboard(),
                parse_mode="Markdown"
            )
            return
        
        text = "üìß **–ò—Å—Ç–æ—Ä–∏—è –æ—Ç–ø—Ä–∞–≤–æ–∫ –Ω–∞ Kindle**\n\n"
        for book in books:
            title, author, date = book
            text += f"üìñ **{title}**\n"
            text += f"üë§ {author}\n"
            text += f"üìÖ {date[:10]}\n\n"
        
        await callback.message.answer(
            text,
            reply_markup=get_back_to_main_keyboard(),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∏—Å—Ç–æ—Ä–∏–∏ Kindle: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏")
        await callback.message.answer(
            "‚ùå **–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏**\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é Kindle. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_back_to_main_keyboard(),
            parse_mode="Markdown"
        )

@dp.callback_query(F.data == "admin_clear_cache")
async def admin_clear_cache(callback: types.CallbackQuery):
    """–û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not await is_admin(callback.from_user.id):
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
            return
        
        await callback.answer("üóëÔ∏è –û—á–∏—â–∞—é –∫–µ—à –±–æ—Ç–∞...")
        
        # –û—á–∏—â–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
        await bot.delete_my_commands()
        
        await callback.message.answer(
            "‚úÖ **–ö–µ—à –±–æ—Ç–∞ –æ—á–∏—â–µ–Ω!**\n\n"
            "–í—Å–µ —Å—Ç–∞—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ –∫–µ—à —É–¥–∞–ª–µ–Ω—ã.\n"
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–≤–∏–¥—è—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞")
        await callback.message.answer(
            "‚ùå **–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞**\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∫–µ—à –±–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_back_to_main_keyboard(),
            parse_mode="Markdown"
        )



@dp.callback_query(F.data == "admin_panel")
async def admin_panel_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not await is_admin(callback.from_user.id):
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
            return
        
        await callback.answer("üëë –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å...")
        
        async with aiosqlite.connect(DB_PATH) as db:
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            cursor = await db.execute("SELECT COUNT(*) FROM users")
            total_users = (await cursor.fetchone())[0]
            
            cursor = await db.execute("SELECT COUNT(*) FROM downloaded_books")
            total_downloads = (await cursor.fetchone())[0]
            
            cursor = await db.execute("SELECT COUNT(*) FROM kindle_sent_books")
            total_kindle = (await cursor.fetchone())[0]
            
            cursor = await db.execute("SELECT COUNT(*) FROM search_history")
            total_searches = (await cursor.fetchone())[0]
        
        text = f"üëë **–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å**\n\n"
        text += f"üìä **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
        text += f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        text += f"‚¨áÔ∏è –ó–∞–≥—Ä—É–∑–æ–∫: {total_downloads}\n"
        text += f"üìß Kindle –æ—Ç–ø—Ä–∞–≤–æ–∫: {total_kindle}\n"
        text += f"üîç –ü–æ–∏—Å–∫–æ–≤: {total_searches}\n\n"
        text += "**–î–µ–π—Å—Ç–≤–∏—è:**"
        
        await callback.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")],
                [InlineKeyboardButton(text="üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
                [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="admin_add")],
                [InlineKeyboardButton(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à –±–æ—Ç–∞", callback_data="admin_clear_cache")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
    await init_db()
    
    # –û—á–∏—â–∞–µ–º –∫–µ—à –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
    try:
        await bot.delete_my_commands()
        logger.info("‚úÖ –ö–µ—à –±–æ—Ç–∞ –æ—á–∏—â–µ–Ω, –∫–æ–º–∞–Ω–¥—ã —Å–±—Ä–æ—à–µ–Ω—ã")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∫–µ—à –±–æ—Ç–∞: {e}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
